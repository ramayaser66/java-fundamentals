/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;

import java.util.ArrayList;
import java.util.List;

public class Library {
    public static void main(String[] args) {
        
        System.out.println(Arrays.toString(roll(3)));

        int[] arr  ={10,29,37,4,85};

        int[][] weeklyMonthTemperatures = {
            {66, 64, 58, 65, 71, 57, 60},
            {57, 65, 65, 70, 72, 65, 51},
            {55, 54, 60, 53, 59, 57, 61},
            {65, 56, 55, 52, 55, 62, 57}
          };

        System.out.println(containsDuplicates(arr)); 
        System.out.println(calcAverage(arr));

        System.out.println(Arrays.toString(arrayOfArrays(weeklyMonthTemperatures)));

        //lab-3 

        System.out.println(monthlyTemperatures(weeklyMonthTemperatures)); 

        
        List<String> votes = new ArrayList<>();
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Shrub");
        votes.add("Hedge");
        votes.add("Shrub");
        votes.add("Bush");
        votes.add("Hedge");
        votes.add("Bush");

        String winner = tally(votes);
        System.out.println(winner + " received the most votes!");
      

        
    }
    // public boolean someLibraryMethod() {
    //     return true;


// roll function 
    public static int[] roll(int n){
        int[] array = new int[n];

 

        for (int i = 0; i < n; i++) {
            double rand = (Math.random() * 6)+1;
               array[i]= (int) rand;
        }
        return array;
    }

// duplicates function 
     public static boolean containsDuplicates(int[] arr){
         boolean flag = false;
         for(int i=0; i< arr.length; i++){
             for(int j=i+1; j<arr.length; j++){
                 if(arr[i] == arr[j]){
                     flag =true;
                 }

             }


         }

         return flag; 


     }

// average calculations 
     public static double calcAverage(int[] arr){
         int sum =0; 
         for(int i =0; i <arr.length; i++){
             sum = sum + arr[i];
         }

         double average = sum/arr.length;
         return average; 

     }
     public static int[] arrayOfArrays (int [][] arr){
        HashMap<Integer, Double>lowestAve = new HashMap<>();
         for (int i = 0; i < arr.length; i++) {
            int sum =0;
             for (int j = 0; j < arr.length; j++) {
                sum = sum + arr[i][j];
             }
            double average = sum/arr[i].length; 
            lowestAve.put(i,average);
         }
         double avg = lowestAve.get(0);
         int k = 0;
         for(int x=1; x<lowestAve.size(); x++){
             if(avg > lowestAve.get(x)){
                 avg = lowestAve.get(x);
                 k = x;
             }
         }
         return arr[k];
        
     }


     // lab-3

     public static String monthlyTemperatures  (int[][] arr){

        HashSet<Integer> uniqueTemperature = new HashSet<>();

        int min = arr[0][0]; 
        int max = arr[0][0];
        String s = ""; 
       




        for (int i = 0; i < arr.length; i++) {

        for (int j = 0; j < arr[i].length; j++){
            uniqueTemperature.add(arr[i][j]); 

            if (min > arr[i][j] ) {
                min = arr[i][j];
                
            }
            if(max < arr[i][j]){
                max = arr[i][j]; 
            }
        }    
        }

        s = s +  "High: "+ max + "\n"; 
        s = s +  "low: "+ min + "\n"; 

        for(int i = min; i <= max ; i++){
            if(!uniqueTemperature.contains(i)){
                s = s +  "Never saw temperature: "+i + "\n"; 




            } 
        
        }

        return s; 


     }

     public static  String tally (List<String> myList){

        HashMap<String,Integer> votes = new HashMap<String, Integer>();

        for(String name : myList ){
            int count = votes.containsKey(name) ? votes.get(name) : 0;
            votes.put(name, count + 1);

        }
        int oneWithMostVotes = 0;
        String Winner = "";
        for (String contestant : votes.keySet()) {
            if (votes.get(contestant) > oneWithMostVotes) {
                Winner = contestant;
                oneWithMostVotes = votes.get(contestant);
            }
        }
        return Winner;



    }




}
